/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.TransportLogistics.WorkArea;

import model.DB4OUtil.DB4OUtil;
import model.EcoSystem.EcoSystem;
import model.Enterprise.TransportLogistics.Handler;
import model.Organization.DonateEntity;
import UI.MainFrame;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shreyasrai
 */
public class HandlerLogin extends javax.swing.JPanel {

    /**
     * Creates new form HandlerLogin
     */
    MainFrame mainScreen;
    private EcoSystem ecoSystem;
    private DB4OUtil dB4OUtil;
    Handler ho;

    public HandlerLogin(MainFrame mainScreen, DB4OUtil dB4OUtil, EcoSystem ecoSystem, Handler ho) {
        initComponents();
        this.mainScreen = mainScreen;
        this.dB4OUtil = dB4OUtil;
        this.ecoSystem = ecoSystem;
        this.ho = ho;
        populateTable(ho.getEmaildId().toLowerCase());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_report = new javax.swing.JTextField();
        addStatus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Blood group", "Entity name", "Status", "Donor Enterprise", "Receiver Enterprise", "Patient Name", "Donor name", "ID"
            }
        ));
        jScrollPane1.setViewportView(tb1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 871, 249));

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton10.setText("Logout");
        jButton10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 460, 110, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Status:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 410, -1, -1));
        add(txt_report, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 400, 140, 30));

        addStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addStatus.setText("Add Status");
        addStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStatusActionPerformed(evt);
            }
        });
        add(addStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 400, 100, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/TransportLogistics/Logistics.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-120, -230, 2060, 1150));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        MainFrame suc = new MainFrame();
        ((JFrame) SwingUtilities.getWindowAncestor(this)).dispose();
        suc.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void addStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStatusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tb1.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to add status");
            return;
        }
        

        DefaultTableModel model = (DefaultTableModel) tb1.getModel();
        String id = model.getValueAt(selectedRow, 8).toString();
//System.out.println("column count " + selectedRow);
        DefaultTableModel model1 = (DefaultTableModel) tb1.getModel();
        DonateEntity de=(DonateEntity) model1.getValueAt(selectedRow, 8);
        for (DonateEntity c : ecoSystem.getDonateEntityList()) {
            try {
                if (c.getId().equals(id)) {
                    c.setStatus(txt_report.getText().toString());
                }
            } catch (Exception e) {

            }
        }
         ecoSystem.generateRequesting1(de.getEntityName(), de.getHandler().getName(), de.getTechnician().getName(), de.getReceiverDoctor().getName(), de.getReceiverPatient().getName());

        dB4OUtil.storeSystem(ecoSystem);
        populateTable(ho.getEmaildId());
        String mail = "Status updated for "+de.getEntityName()+" of donor having blood group "+de.getBloodGroup()+" with id: " + de.getId() + " for patient having user name: " + de.getReceiverPatient()+ ". The Transplant Status has been updated by our extremely responsible handler, "+de.getHandler().getName()+". Don't Worry You are in Safe Hands";
        JOptionPane.showMessageDialog(this, "Status updated & Mail sent successfully.");
        try{
        sendMail(mail);
        }
        catch(Exception e){}
    }//GEN-LAST:event_addStatusActionPerformed
public void sendMail(String mail) {

        try {
            Properties properties = new Properties();
//            properties.put("mail.smtp.auth", "true");
//            properties.put("mail.smtp.starttls.enable", "true");
//            properties.put("mail.smtp.host", "smtp.gmail.com");
//            properties.put("mail.smtp.port", "587");
            properties.put("mail.smtp.user", "username");

            properties.put("mail.smtp.host", "smtp.gmail.com");
            properties.put("mail.smtp.port", "25");
            properties.put("mail.debug", "true");
            properties.put("mail.smtp.auth", "true");
            properties.put("mail.smtp.starttls.enable", "true");
            properties.put("mail.smtp.EnableSSL.enable", "true");

            properties.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            properties.setProperty("mail.smtp.socketFactory.fallback", "false");
            properties.setProperty("mail.smtp.port", "465");
            properties.setProperty("mail.smtp.socketFactory.port", "465");
            String myAccountEmail = "aedproj2022@gmail.com";
            String password = "gesxjnjnaprmmyzy";
            Session session;
            session = Session.getInstance(properties, new javax.mail.Authenticator() {
                @Override
                protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                    return new javax.mail.PasswordAuthentication(myAccountEmail, password);
                }
            });
            Message message = prepareMessage(mail,session, myAccountEmail, "smiti.r.agrawal@gmail.com", "msg", "sub");
            Transport.send(message);
// System.out.println("Successful sent");
        } catch (MessagingException ex) {
            ex.printStackTrace();
//            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
        catch (Exception e) {

        }
    }

private static Message prepareMessage(String mail,Session session, String myAccountEmail, String toAddress, String emailmsg, String emailsubject) {

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(myAccountEmail));
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(toAddress));
            message.setSubject("Organ & Blood Transplantation System- Status Update");
            message.setText(mail);
            return message;
        } catch (MessagingException ex) {
            ex.printStackTrace();
//            Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
}
    private void populateTable(String name) {
        DefaultTableModel model = (DefaultTableModel) tb1.getModel();
        model.setRowCount(0);
        System.out.println("populatetable");
        for (DonateEntity d : ecoSystem.getDonateEntityList()) {
            
            try{
                //System.out.println("print: "+d.getHandler().getUname()+" "+d.getHandler().getUname().matches(name));
            if (d.getHandler().getEmaildId().matches(name)) {
                Object[] row = new Object[9];
                row[0] = d.getType();
                row[1] = d.getBloodGroup();
                row[2] = d.getEntityName();
                row[3] = d.getStatus();
                try {
                    row[4] = d.getDonorEnterprise().getEnterpriseName();
                } catch (Exception e) {

                }

                try {
                    row[5] = d.getReceiverEnterprise().getEnterpriseName();
                } catch (Exception e) {

                }
                try {
                    row[6] = d.getReceiverPatient().getName();
                } catch (Exception e) {

                }
                try {
                    row[7] = d.getDonorPatient().getName();
                } catch (Exception e) {

                }
                row[8] = d;

                model.addRow(row);
            }
            }catch(Exception e){
                //System.out.println("error: ");
//                e.printStackTrace();
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStatus;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb1;
    private javax.swing.JTextField txt_report;
    // End of variables declaration//GEN-END:variables
}
